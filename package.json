{
  "name": "sentinelcodeguard",
  "displayName": "SentinelCodeGuard (Beta)",
  "description": "Professional development toolkit for Microsoft Sentinel Analytics Rules with intelligent validation, formatting, and comprehensive templates (Beta Version)",
  "version": "0.0.11",
  "publisher": "noodlemctwoodle",
  "icon": "images/icon.png",
  "engines": {
    "vscode": "^1.101.0"
  },
  "categories": [
    "Linters",
    "Formatters",
    "Snippets",
    "Language Packs"
  ],
  "keywords": [
    "sentinel",
    "microsoft",
    "azure",
    "security",
    "analytics",
    "rules",
    "yaml",
    "validation",
    "kql",
    "mitre",
    "attack",
    "codeguard",
    "detection",
    "threat-hunting",
    "beta",
    "preview"
  ],
  "homepage": "https://sentinel.blog",
  "repository": {
    "type": "git",
    "url": "https://github.com/noodlemctwoodle/SentinelCodeGuard"
  },
  "bugs": {
    "url": "https://github.com/noodlemctwoodle/SentinelCodeGuard/issues"
  },
  "license": "MIT",
  "main": "./out/extension.js",
  "activationEvents": [
    "onLanguage:yaml"
  ],
  "contributes": {
    "languages": [
      {
        "id": "sentinel-rule",
        "aliases": [
          "Sentinel Analytics Rule",
          "sentinel-rule"
        ],
        "extensions": [
          ".sentinel.yaml",
          ".sentinel.yml"
        ],
        "configuration": "./language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "sentinel-rule",
        "scopeName": "source.yaml.sentinel",
        "path": "./syntaxes/sentinel-rule.tmGrammar.json"
      }
    ],
    "snippets": [
      {
        "language": "sentinel-rule",
        "path": "./snippets/sentinel-rules.json"
      }
    ],
    "commands": [
      {
        "command": "sentinelRules.fixFieldOrder",
        "title": "Fix Field Order",
        "category": "Sentinel Rules"
      },
      {
        "command": "sentinelRules.formatRule",
        "title": "Format Sentinel Rule",
        "category": "Sentinel Rules"
      },
      {
        "command": "sentinelRules.createSentinelRule",
        "title": "Create Sentinel Rule Template...",
        "category": "Sentinel Rules"
      },
      {
        "command": "sentinelRules.generateRuleTemplate",
        "title": "Generate Rule Template",
        "category": "Sentinel Rules"
      },
      {
        "command": "sentinelRules.regenerateGuid",
        "title": "Generate New Rule ID",
        "category": "Sentinel Rules"
      },
      {
        "command": "sentinelRules.regenerateAllGuids",
        "title": "Generate New IDs for All Rules",
        "category": "Sentinel Rules"
      },
      {
        "command": "sentinelRules.generateTemplate",
        "title": "Generate Standard Rule Template",
        "category": "Sentinel Rules"
      },
      {
        "command": "sentinelRules.generateAdvancedTemplate",
        "title": "Generate Advanced Rule Template",
        "category": "Sentinel Rules"
      },
      {
        "command": "sentinelRules.generateNRTTemplate",
        "title": "Generate NRT Rule Template",
        "category": "Sentinel Rules"
      },
      {
        "command": "sentinelRules.generateBehaviorAnalyticsTemplate",
        "title": "Generate Behavior Analytics Rule Template",
        "category": "Sentinel Rules"
      },
      {
        "command": "sentinelRules.generateMinimalTemplate",
        "title": "Generate Minimal Rule Template",
        "category": "Sentinel Rules"
      },
      {
        "command": "sentinelRules.validateWorkspace",
        "title": "Bulk Maintenance & Validation",
        "category": "Sentinel Rules"
      },
      {
        "command": "sentinelRules.convertArmToYaml",
        "title": "Decompile ARM to YAML",
        "category": "Sentinel Rules"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "when": "resourceExtname == .yaml && resourceFilename =~ /.*\\.sentinel\\.(yaml|yml)$/",
          "command": "sentinelRules.fixFieldOrder",
          "group": "sentinel@1"
        },
        {
          "when": "resourceExtname == .yaml && resourceFilename =~ /.*\\.sentinel\\.(yaml|yml)$/",
          "command": "sentinelRules.formatRule",
          "group": "sentinel@2"
        },
        {
          "when": "resourceExtname == .yaml || resourceExtname == .yml",
          "command": "sentinelRules.regenerateGuid",
          "group": "sentinel@3"
        },
        {
          "when": "resourceExtname == .json && config.sentinelRules.conversion.enabled",
          "command": "sentinelRules.convertArmToYaml",
          "group": "sentinel@4"
        }
      ],
      "explorer/context": [
        {
          "when": "explorerResourceIsFolder",
          "command": "sentinelRules.createSentinelRule",
          "group": "sentinel@1"
        },
        {
          "when": "resourceExtname == .yaml || resourceExtname == .yml",
          "command": "sentinelRules.regenerateGuid",
          "group": "sentinel@2"
        },
        {
          "when": "resourceExtname == .json && config.sentinelRules.conversion.enabled",
          "command": "sentinelRules.convertArmToYaml",
          "group": "sentinel@3"
        }
      ],
      "commandPalette": [
        {
          "command": "sentinelRules.fixFieldOrder",
          "when": "resourceExtname == .yaml"
        },
        {
          "command": "sentinelRules.createSentinelRule",
          "when": "false"
        },
        {
          "command": "sentinelRules.generateRuleTemplate"
        },
        {
          "command": "sentinelRules.regenerateGuid",
          "when": "resourceExtname == .yaml"
        },
        {
          "command": "sentinelRules.regenerateAllGuids"
        },
        {
          "command": "sentinelRules.formatRule",
          "when": "resourceExtname == .yaml"
        },
        {
          "command": "sentinelRules.validateWorkspace"
        },
        {
          "command": "sentinelRules.convertArmToYaml",
          "when": "config.sentinelRules.conversion.enabled"
        },
        {
          "command": "sentinelRules.generateTemplate",
          "when": "false"
        },
        {
          "command": "sentinelRules.generateAdvancedTemplate",
          "when": "false"
        },
        {
          "command": "sentinelRules.generateNRTTemplate",
          "when": "false"
        },
        {
          "command": "sentinelRules.generateBehaviorAnalyticsTemplate",
          "when": "false"
        },
        {
          "command": "sentinelRules.generateMinimalTemplate",
          "when": "false"
        }
      ]
    },
    "keybindings": [
      {
        "command": "sentinelRules.fixFieldOrder",
        "key": "ctrl+shift+f",
        "mac": "cmd+shift+f",
        "when": "resourceExtname == .yaml && resourceFilename =~ /.*\\.sentinel\\.(yaml|yml)$/"
      }
    ],
    "configuration": {
      "title": "Sentinel Analytics Rules",
      "properties": {
        "sentinelRules.validation.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable automatic validation of Sentinel rules"
        },
        "sentinelRules.validation.onSave": {
          "type": "boolean",
          "default": true,
          "description": "Validate rules automatically on save"
        },
        "sentinelRules.validation.onType": {
          "type": "boolean",
          "default": false,
          "description": "Validate rules as you type (may impact performance)"
        },
        "sentinelRules.formatting.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable automatic formatting of Sentinel rules"
        },
        "sentinelRules.fieldOrdering.enforceOrder": {
          "type": "boolean",
          "default": true,
          "description": "Enforce proper field ordering in Sentinel rules"
        },
        "sentinelRules.fieldOrdering.showOrderHints": {
          "type": "boolean",
          "default": true,
          "description": "Show field ordering hints in diagnostics"
        },
        "sentinelRules.intellisense.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable IntelliSense for Sentinel rule fields"
        },
        "sentinelRules.mitre.version": {
          "type": "string",
          "default": "v16",
          "enum": [
            "v16",
            "v15",
            "v14"
          ],
          "description": "MITRE ATT&CK framework version to use for validation"
        },
        "sentinelRules.mitre.frameworks": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "enterprise",
              "mobile",
              "ics"
            ]
          },
          "default": [
            "enterprise",
            "mobile",
            "ics"
          ],
          "description": "MITRE ATT&CK frameworks to load and validate against"
        },
        "sentinelRules.connectors.validationMode": {
          "type": "string",
          "enum": [
            "strict",
            "workspace",
            "permissive"
          ],
          "default": "permissive",
          "enumDescriptions": [
            "Only allow known connectors from extension database",
            "Allow connectors defined in workspace .sentinel-connectors.json",
            "Allow any valid connector ID format (recommended)"
          ],
          "description": "How strictly to validate connector IDs"
        },
        "sentinelRules.connectors.customConnectors": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Additional custom connector IDs to recognize"
        },
        "sentinelRules.mitre.allowUnknownTactics": {
          "type": "boolean",
          "default": true,
          "description": "Allow tactics not found in loaded MITRE data (shows info message only)"
        },
        "sentinelRules.mitre.allowUnknownTechniques": {
          "type": "boolean",
          "default": true,
          "description": "Allow techniques not found in loaded MITRE data (shows info message only)"
        },
        "sentinelRules.mitre.strictValidation": {
          "type": "boolean",
          "default": false,
          "description": "Require all tactics/techniques to be in loaded MITRE data (shows errors for unknown items)"
        },
        "sentinelRules.conversion.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable ARM template to YAML conversion functionality"
        },
        "sentinelRules.conversion.defaultNamingStrategy": {
          "type": "string",
          "enum": [
            "original",
            "displayName",
            "ruleId"
          ],
          "default": "displayName",
          "enumDescriptions": [
            "Use original filename with .yaml extension",
            "Use rule's displayName property as filename",
            "Use rule's unique identifier as filename"
          ],
          "description": "Default strategy for naming converted YAML files"
        },
        "sentinelRules.conversion.validateMitreOnConversion": {
          "type": "boolean",
          "default": true,
          "description": "Validate and correct MITRE tactics/techniques during conversion"
        },
        "sentinelRules.conversion.autoFormatAfterConversion": {
          "type": "boolean",
          "default": true,
          "description": "Automatically format converted YAML files using SentinelCodeGuard formatting"
        },
        "sentinelRules.conversion.showConversionSummary": {
          "type": "boolean",
          "default": true,
          "description": "Show conversion summary dialog with warnings and results"
        },
        "sentinelRules.conversion.outputDirectory": {
          "type": "string",
          "default": "",
          "description": "Custom output directory for converted files (empty = same directory as source)"
        },
        "sentinelRules.conversion.preserveQueryFormatting": {
          "type": "boolean",
          "default": true,
          "description": "Preserve original KQL query formatting in converted YAML"
        },
        "sentinelRules.conversion.includeOptionalFields": {
          "type": "boolean",
          "default": true,
          "description": "Include optional fields with default values in converted YAML"
        },
        "sentinelRules.conversion.validateEntityMappings": {
          "type": "boolean",
          "default": true,
          "description": "Validate entity types and identifiers during conversion"
        },
        "sentinelRules.conversion.defaultVersion": {
          "type": "string",
          "default": "1.0.0",
          "description": "Default version for rules missing templateVersion in ARM template"
        },
        "sentinelRules.conversion.defaultStatus": {
          "type": "string",
          "enum": [
            "Available",
            "Disabled"
          ],
          "default": "Available",
          "description": "Default status when enabled=true in ARM template"
        }
      }
    },
    "jsonValidation": [
      {
        "fileMatch": "*.sentinel.yaml",
        "url": "./schemas/sentinel-analytics-rule-schema.json"
      },
      {
        "fileMatch": "*.sentinel.yml",
        "url": "./schemas/sentinel-analytics-rule-schema.json"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts --fix",
    "lint:check": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js",
    "package": "vsce package",
    "publish": "vsce publish"
  },
  "devDependencies": {
    "@eslint/js": "^9.30.1",
    "@types/js-yaml": "^4.0.9",
    "@types/node": "^24.0.10",
    "@types/uuid": "^10.0.0",
    "@types/vscode": "^1.101.0",
    "@typescript-eslint/eslint-plugin": "^8.35.1",
    "@typescript-eslint/parser": "^8.35.1",
    "@vscode/test-electron": "^2.4.2",
    "@vscode/vsce": "^3.6.0",
    "eslint": "^9.30.1",
    "typescript": "^5.8.3",
    "@types/mocha": "^10.0.10",
    "mocha": "^10.8.2",
    "glob": "^11.0.0",
    "@types/glob": "^8.1.0"
  },
  "dependencies": {
    "js-yaml": "^4.1.0",
    "jsonschema": "^1.4.1",
    "uuid": "^11.1.0"
  }
}
